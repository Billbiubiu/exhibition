{"version":3,"sources":["pages/exhibition/index.js","index.js"],"names":["PI","Math","Exhibition","containerRef","useRef","useState","inited","setInited","useReducer","state","newState","instances","setInstances","animations","useEffect","container","current","offsetWidth","offsetHeight","scene","three","camera","position","set","rotation","renderer","antialias","setSize","setClearColor","appendChild","domElement","window","resize","aspect","updateProjectionMatrix","addEventListener","removeEventListener","ambientLight","add","pointLight","onPointerDown","downEvent","x","y","downX","offsetX","downY","offsetY","onPointerMove","moveEvent","moveX","moveY","rotationX","rotationY","console","info","onPointerUp","startTime","Date","now","upEvent","upX","upY","endTime","abs","raycaster","mouse","setFromCamera","intersects","intersectObjects","children","intersect","object","onClick","geometry","material","color","floor","z","point","TWEEN","Tween","to","interpolation","Interpolation","Bezier","easing","Easing","Linear","None","start","ceiling","createWall","paths","transform","wall","group","forEach","path","index","Promise","resolve","reject","image","Image","src","onload","width","height","ratioX","ratioY","ratio","max","w","h","texture","load","map","exhibit","box","setFromObject","min","boxCenter","source","target","maked","diff","getRotation","onerror","createExhibit","then","wallFront","wallBack","wallLeft","wallRight","interrupt","update","requestAnimationFrame","Object","values","animation","render","ref","style","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb7bf2ae.chunk.js","sourcesContent":["import React, { useEffect, useReducer, useRef, useState } from 'react';\r\nimport * as three from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\nimport TWEEN from '@tweenjs/tween.js';\r\n\r\nconst { PI } = Math;\r\n\r\nconst Exhibition = () => {\r\n  const containerRef = useRef();\r\n  const [inited, setInited] = useState(false);\r\n  const [instances, setInstances] = useReducer((state, newState) => ({ ...state, ...newState }), {});\r\n  const [animations, setAnimations] = useReducer((state, newState) => ({ ...state, ...newState }), {});\r\n  /**\r\n   * 初始化\r\n   */\r\n  useEffect(() => {\r\n    if (inited) return;\r\n    const container = containerRef.current;\r\n    const { offsetWidth, offsetHeight } = container;\r\n    const scene = new three.Scene();\r\n    const camera = new three.PerspectiveCamera(75, offsetWidth / offsetHeight, 0.1, 1000);\r\n    camera.position.set(0, 0, 12);\r\n    camera.rotation.set(PI / 2, 0, 0)\r\n    const renderer = new three.WebGLRenderer({ antialias: true });\r\n    renderer.setSize(offsetWidth, offsetHeight);\r\n    renderer.setClearColor(0x222842, 1);\r\n    container.appendChild(renderer.domElement);\r\n    setInstances({ scene, camera, renderer });\r\n    setInited(true);\r\n    window.scene = scene;\r\n    window.camera = camera;\r\n    window.renderer = renderer;\r\n  }, [inited]);\r\n  const { scene, camera, renderer } = instances;\r\n  /**\r\n   * 监听窗口缩放\r\n   */\r\n  useEffect(() => {\r\n    if (!camera || !renderer) return;\r\n    // resize\r\n    const resize = () => {\r\n      const container = containerRef.current;\r\n      const { offsetWidth, offsetHeight } = container;\r\n      camera.aspect = offsetWidth / offsetHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(offsetWidth, offsetHeight);\r\n    };\r\n    window.addEventListener('resize', resize);\r\n    return () => {\r\n      window.removeEventListener('resize', resize);\r\n    };\r\n  }, [camera, renderer]);\r\n  /**\r\n   * 添加grid参考和axis参考\r\n   * @deprecated\r\n   */\r\n  useEffect(() => {\r\n    if (!scene || true) return;\r\n    const gridWidth = 100;\r\n    const grid = new three.GridHelper(gridWidth, 10);\r\n    grid.rotation.x = PI / 2;\r\n    scene.add(grid);\r\n    const axes = new three.AxesHelper(gridWidth / 2);\r\n    scene.add(axes);\r\n  }, [scene]);\r\n  /**\r\n   * 添加灯光\r\n   */\r\n  useEffect(() => {\r\n    if (!scene) return;\r\n    const ambientLight = new three.AmbientLight(0xFFFFFF, 0.5);\r\n    scene.add(ambientLight);\r\n    const pointLight = new three.PointLight(0xFFFFFF, 1, 80);\r\n    pointLight.position.set(0, 0, 19);\r\n    scene.add(pointLight);\r\n  }, [scene]);\r\n  /**\r\n   * 添加轨道控制器\r\n   * @deprecated\r\n   */\r\n  useEffect(() => {\r\n    if (!camera || !renderer || true) return;\r\n    const orbitControls = new OrbitControls(camera, renderer.domElement);\r\n    // orbitControls.autoRotate = true;\r\n    // orbitControls.enableDamping = true;\r\n    const animation = () => orbitControls.update();\r\n    setAnimations({ orbitControls: animation });\r\n    setInstances({ orbitControls });\r\n  }, [camera, renderer]);\r\n  /**\r\n   * 添加自定义控制器\r\n   */\r\n  useEffect(() => {\r\n    if (!camera || !renderer) return;\r\n    const { domElement } = renderer;\r\n    const onPointerDown = downEvent => {\r\n      const { offsetWidth, offsetHeight } = domElement;\r\n      const { x, y } = camera.rotation;\r\n      const { offsetX: downX, offsetY: downY } = downEvent;\r\n      const onPointerMove = moveEvent => {\r\n        const { offsetX: moveX, offsetY: moveY } = moveEvent;\r\n        const dy = moveY - downY;\r\n        const rotationX = x + (dy / (offsetHeight / 2) * PI);\r\n        // camera.rotation.x = rotationX;\r\n        const dx = moveX - downX;\r\n        const rotationY = y + (dx / (offsetWidth / 2) * (2 * PI))\r\n        camera.rotation.y = rotationY;\r\n        console.info(rotationX, rotationY);\r\n      }\r\n      const onPointerUp = () => {\r\n        domElement.removeEventListener('pointermove', onPointerMove);\r\n        domElement.removeEventListener('pointerup', onPointerUp);\r\n      }\r\n      domElement.addEventListener('pointermove', onPointerMove);\r\n      domElement.addEventListener('pointerup', onPointerUp);\r\n    }\r\n    domElement.addEventListener('pointerdown', onPointerDown);\r\n    return () => {\r\n      domElement.removeEventListener('pointerdown', onPointerDown);\r\n    }\r\n  }, [camera, renderer])\r\n  /**\r\n   * 添加光线追踪，处理点击事件\r\n   */\r\n  useEffect(() => {\r\n    if (!scene || !camera || !renderer) return;\r\n    const { domElement } = renderer;\r\n    const onPointerDown = downEvent => {\r\n      const { offsetX: downX, offsetY: downY } = downEvent;\r\n      const startTime = Date.now();\r\n      const onPointerUp = upEvent => {\r\n        domElement.removeEventListener('pointerup', onPointerUp);\r\n        const { offsetX: upX, offsetY: upY } = upEvent;\r\n        const endTime = Date.now();\r\n        if (\r\n          Math.abs(downX - upX) > 5 ||\r\n          Math.abs(downY - upY) > 5 ||\r\n          endTime - startTime > 1000\r\n        ) return;\r\n        const { offsetWidth, offsetHeight } = domElement;\r\n        const raycaster = new three.Raycaster();\r\n        const x = (upX / offsetWidth) * 2 - 1;\r\n        const y = -(upY / offsetHeight) * 2 + 1;\r\n        const mouse = new three.Vector2(x, y);\r\n        raycaster.setFromCamera(mouse, camera);\r\n        const intersects = raycaster.intersectObjects(scene.children, true);\r\n        const [intersect] = intersects;\r\n        if (\r\n          intersect &&\r\n          intersect.object &&\r\n          intersect.object.onClick\r\n        ) {\r\n          intersect.object.onClick(intersect);\r\n        }\r\n      }\r\n      domElement.addEventListener('pointerup', onPointerUp);\r\n    }\r\n    domElement.addEventListener('pointerdown', onPointerDown);\r\n    return () => {\r\n      domElement.removeEventListener('pointerdown', onPointerDown);\r\n    }\r\n  }, [scene, camera, renderer]);\r\n  /**\r\n   * 绘制地板\r\n   */\r\n  useEffect(() => {\r\n    if (!scene || !camera) return;\r\n    const geometry = new three.BoxGeometry(100, 100, 1);\r\n    const material = new three.MeshPhysicalMaterial({ color: 0x333333 });\r\n    const floor = new three.Mesh(geometry, material);\r\n    floor.position.z = -0.5;\r\n    floor.onClick = intersect => {\r\n      // 控制范围，不能离墙过近\r\n      let { x, y } = intersect.point;\r\n      if (Math.abs(x) > 30) x = x > 0 ? 30 : - 30;\r\n      if (Math.abs(y) > 30) y = y > 0 ? 30 : -30;\r\n      new TWEEN.Tween(camera.position)\r\n        .to({ x, y }, 200)\r\n        .interpolation(TWEEN.Interpolation.Bezier)\r\n        .easing(TWEEN.Easing.Linear.None)\r\n        .start();\r\n    };\r\n    scene.add(floor);\r\n  }, [scene, camera]);\r\n  /**\r\n   * 绘制天花板\r\n   */\r\n  useEffect(() => {\r\n    if (!scene || !camera) return;\r\n    const geometry = new three.BoxGeometry(100, 100, 1);\r\n    const material = new three.MeshPhysicalMaterial({ color: 0xFFFFFF });\r\n    const ceiling = new three.Mesh(geometry, material);\r\n    ceiling.position.z = 20 + 0.5;\r\n    scene.add(ceiling);\r\n  }, [scene, camera]);\r\n  /**\r\n   * 绘制墙壁\r\n   */\r\n  useEffect(() => {\r\n    if (!scene || !camera) return;\r\n    /**\r\n     * 创建展品\r\n     * @param {*} path 展品图片路径\r\n     * @param {*} transform 点击展品时设置机位\r\n     * @returns \r\n     */\r\n    const createExhibit = (path, transform) => {\r\n      return new Promise((resolve, reject) => {\r\n        const image = new Image();\r\n        image.src = path;\r\n        image.onload = () => {\r\n          const { width, height } = image;\r\n          const ratioX = width / 16;\r\n          const ratioY = height / 9;\r\n          const ratio = Math.max(ratioX, ratioY);\r\n          const w = width / ratio;\r\n          const h = height / ratio;\r\n          const texture = new three.TextureLoader().load(path);\r\n          const geometry = new three.BoxGeometry(w, h, 0.4);\r\n          const material = [\r\n            new three.MeshPhysicalMaterial({ color: 0xFFFFFF }),\r\n            new three.MeshPhysicalMaterial({ color: 0xFFFFFF }),\r\n            new three.MeshPhysicalMaterial({ color: 0xFFFFFF }),\r\n            new three.MeshPhysicalMaterial({ color: 0xFFFFFF }),\r\n            new three.MeshPhysicalMaterial({ color: 0xFFFFFF }),\r\n            new three.MeshPhysicalMaterial({ map: texture }),\r\n          ];\r\n          const exhibit = new three.Mesh(geometry, material);\r\n          exhibit.position.z = 0.3;\r\n          exhibit.rotation.x = PI / 2;\r\n          exhibit.onClick = () => {\r\n            var box = new three.Box3();\r\n            box.setFromObject(exhibit);\r\n            const { min, max } = box;\r\n            const boxCenter = {\r\n              x: min.x + (max.x - min.x),\r\n              y: min.y + (max.y - min.y),\r\n              z: min.z + (max.z - min.z),\r\n            };\r\n            new TWEEN.Tween(camera.position)\r\n              .to({ x: boxCenter.x + transform.position.x, y: boxCenter.y + transform.position.y }, 500)\r\n              .interpolation(TWEEN.Interpolation.Bezier)\r\n              .easing(TWEEN.Easing.Linear.None)\r\n              .start();\r\n            const getRotation = (source, target) => {\r\n              let maked = source % (PI * 2);\r\n              maked = maked > 0 ? maked : maked + (PI * 2);\r\n              const diff = target - maked;\r\n              // 差值大于180度，需要反方向旋转\r\n              if (Math.abs(diff) > PI) {\r\n                if (diff > 0) {\r\n                  return source + (PI * 2 - diff);\r\n                } else {\r\n                  return source + (PI * 2 + diff);\r\n                }\r\n              } else {\r\n                return source + diff;\r\n              }\r\n            }\r\n            new TWEEN.Tween(camera.rotation)\r\n              .to({ y: getRotation(camera.rotation.y, transform.rotation.y) }, 500)\r\n              .interpolation(TWEEN.Interpolation.Bezier)\r\n              .easing(TWEEN.Easing.Linear.None)\r\n              .start();\r\n          }\r\n          const group = new three.Group();\r\n          group.add(exhibit);\r\n          resolve(group);\r\n        };\r\n        image.onerror = () => reject();\r\n      })\r\n    };\r\n    /**\r\n     * 创建墙壁\r\n     * @param {*} paths 展品图片路径列表\r\n     * @param {*} transform 点击展品时设置机位\r\n     * @returns \r\n     */\r\n    const createWall = (paths, transform) => {\r\n      const geometry = new three.BoxGeometry(100, 20, 1);\r\n      const material = new three.MeshPhysicalMaterial({ color: 0xDDDDDD });\r\n      const wall = new three.Mesh(geometry, material);\r\n      wall.position.z = 10;\r\n      wall.rotation.x = PI / 2;\r\n      // create group\r\n      const group = new three.Group();\r\n      group.add(wall);\r\n      // add exhibits\r\n      const spacing = 100 / 5;\r\n      const startX = spacing / 2;\r\n      paths.forEach((path, index) => {\r\n        createExhibit(path, transform).then(exhibit => {\r\n          const x = -50 + startX + (spacing * index);\r\n          exhibit.position.set(x, 0.5, 12);\r\n          group.add(exhibit);\r\n        });\r\n      })\r\n      return group;\r\n    };\r\n    // 正面墙\r\n    const wallFront = createWall([\r\n      './exhibits/1-1.jpg',\r\n      './exhibits/1-2.jpg',\r\n      './exhibits/1-3.jpg',\r\n      './exhibits/1-4.jpg',\r\n      './exhibits/1-5.jpg',\r\n    ], {\r\n      position: { x: 0, y: -20 },\r\n      rotation: { y: 0 },\r\n    });\r\n    wallFront.position.set(0, 50, 0);\r\n    wallFront.rotation.set(0, 0, PI);\r\n    // 背面墙\r\n    const wallBack = createWall([\r\n      './exhibits/2-1.jpg',\r\n      './exhibits/2-2.jpg',\r\n      './exhibits/2-3.jpg',\r\n      './exhibits/2-4.jpg',\r\n      './exhibits/2-5.jpg',\r\n    ], {\r\n      position: { x: 0, y: 20 },\r\n      rotation: { y: PI },\r\n    });\r\n    wallBack.position.set(0, -50, 0);\r\n    // 左面墙\r\n    const wallLeft = createWall([\r\n      './exhibits/3-1.jpg',\r\n      './exhibits/3-2.jpg',\r\n      './exhibits/3-3.jpg',\r\n      './exhibits/3-4.jpg',\r\n      './exhibits/3-5.jpg',\r\n    ], {\r\n      position: { x: 20, y: 0 },\r\n      rotation: { y: PI / 2 },\r\n    });\r\n    wallLeft.position.set(-50, 0, 0);\r\n    wallLeft.rotation.set(0, 0, PI / 2 * 3);\r\n    // 右面墙\r\n    const wallRight = createWall([\r\n      './exhibits/4-1.jpg',\r\n      './exhibits/4-2.jpg',\r\n      './exhibits/4-3.jpg',\r\n      './exhibits/4-4.jpg',\r\n      './exhibits/4-5.jpg',\r\n    ], {\r\n      position: { x: -20, y: 0 },\r\n      rotation: { y: PI / 2 * 3 },\r\n    });\r\n    wallRight.position.set(50, 0, 0);\r\n    wallRight.rotation.set(0, 0, PI / 2);\r\n    scene.add(wallFront, wallBack, wallLeft, wallRight);\r\n  }, [scene, camera]);\r\n  /**\r\n   * 渲染场景\r\n   */\r\n  useEffect(() => {\r\n    if (!scene || !camera || !renderer) return;\r\n    let interrupt = false;\r\n    const update = () => {\r\n      if (interrupt) return;\r\n      requestAnimationFrame(update);\r\n      TWEEN.update();\r\n      Object.values(animations).forEach(animation => animation());\r\n      renderer.render(scene, camera);\r\n    };\r\n    update();\r\n    return () => interrupt = true;\r\n  }, [scene, camera, renderer, animations]);\r\n  return (\r\n    <div\r\n      ref={containerRef}\r\n      style={{\r\n        width: '100vw',\r\n        height: '100vh',\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Exhibition;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Exhibition from './pages/exhibition';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Exhibition />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}